plugins {
	id 'java'
	id "com.diffplug.spotless" version "6.6.1"
}

group 'org.zlab'
version '1.0-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(11)
	}
}

repositories {
	mavenCentral()
	maven { url "https://jitpack.io" }
}

dependencies {
	compile 'commons-cli:commons-cli:1.5.0'
	implementation group: 'org.apache.commons', name: 'commons-lang3', version: '3.12.0'
	implementation group: 'org.apache.maven.reporting', name: 'maven-reporting-api', version: '3.0'

	implementation 'com.google.code.gson:gson:2.9.0'

	implementation 'com.github.st-saint:jacoco:300f3f6d2b'

	// https://mvnrepository.com/artifact/com.googlecode.json-simple/json-simple
	implementation group: 'com.googlecode.json-simple', name: 'json-simple', version: '1.1.1'

	testImplementation 'org.junit.jupiter:junit-jupiter-api:5.6.0'
	testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.6.0'

	// compile files("../jacoco/org.jacoco.core/target/classes") {
	//     builtBy "compileMavenProject"
	// }
	// compile files("../jacoco/org.jacoco.core/target/libs") {
	//     builtBy "downloadMavenDependencies"
	// }
}

test {
	useJUnitPlatform()
	testLogging {
		showExceptions true
		showStackTraces true
		showCauses true
		exceptionFormat "full"
		outputs.upToDateWhen {false}
		showStandardStreams = true
	}
}

task copyDependencies(type: Copy) {
from configurations.default
into 'dependencies'
}

task compileMavenProject() {
	// exec {
	//     workingDir "../jacoco/"
	//     commandLine "/usr/bin/mvn", "-f", "org.jacoco.build/pom.xml", "spotless:apply"
	// }
	// exec {
	//     workingDir "../jacoco/"
	//     commandLine "/usr/bin/mvn", "clean", "install", "-DskipTests"
	// }
	// mvn -f org.jacoco.build/pom.xml spotless:apply; mvn clean compile -DskipTests
}

task downloadMavenDependencies(type: Exec) {
	workingDir "../jacoco/"
	commandLine "/usr/bin/mvn", "dependency:copy-dependencies", "-DoutputDirectory=target/libs"
}

spotless {
	// optional: limit format enforcement to just the files changed by this feature branch
	ratchetFrom 'origin/main'

	format 'misc', {
		// define the files to apply `misc` to
		target '*.gradle', '*.md', '.gitignore'

		// define the steps to apply to those files
		trimTrailingWhitespace()
		indentWithTabs() // or spaces. Takes an integer argument if you don't like 4
		endWithNewline()
	}
	java {
		// don't need to set target, it is inferred from java

		// apply a specific flavor of google-java-format
		googleJavaFormat('1.8').aosp().reflowLongStrings().groupArtifact('com.google.googlejavaformat:google-java-format')

		// make sure every file has the following copyright header.
		// optionally, Spotless can set copyright years by digging
		// through git history (see "license" section below)
		licenseHeader '/* (C)$YEAR */'
	}
}
